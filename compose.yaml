# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  ll_project:
    build:
      context: .
    ports:
      - 8010:8000
    env_file:
      - .env
    command: >
      bash -c "python manage.py runserver 0.0.0.0:8000"
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres:latest
#     restart: always
#     environment:
#       POSTGRES_DB: ${DATABASE_NAME}
#       POSTGRES_USER: ${DATABASE_USER}
#       POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     expose:
#       - "5439:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   pgadmin:
#     image: dpage/pgadmin4
#     restart: always
#     environment:
#       - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL}
#       - PGADMIN_DEFAULT_PASSWORD=${PG_ADMIN_PASS}
#     ports:
#       - "5052:80"
#     depends_on:
#       - db
#     volumes:
#       - pgAdmin-data:/var/lib/pgadmin

# volumes:
#   db-data:
#     driver: local
#   pgAdmin-data:
#     driver: local
